# Copyright (C) 2025 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This workflow is triggered by analyze.yml
name: Perfetto CI [bazel]
on:
  workflow_call:
  workflow_dispatch: # This allows manual triggering
    inputs:
      pr_number:
        description: 'Pull Request Number'
        required: true
        type: number
env:
  # /tmp/cache contains {ccache, bazelcache} and generally any other cache
  # that should be persisted across jobs, but only updated from the main
  # branch. This is populated by the "Restore cache" step below.
  PERFETTO_CACHE_DIR: /tmp/cache
  PERFETTO_ARTIFACTS_ROOT: /tmp/artifacts
  PYTHONUNBUFFERED: 1
jobs:
  bazel:
    runs-on: self-hosted
    timeout-minutes: 45
    env:
      PERFETTO_CI_BUILD_CACHE_KEY: build-cache-bazel-wip-tests
      PERFETTO_CI_JOB_ID: gh-${{ github.run_id }}-bazel
      PERFETTO_BUILD_LOGS_DIR: /tmp/bazel-build-logs
    steps:
      - name: Do checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.pr_number && format('refs/pull/{0}/head', github.event.inputs.pr_number) || github.ref }}

      - name: Setup artifacts
        shell: bash
        run: |
          PERFETTO_ARTIFACTS_DIR=$PERFETTO_ARTIFACTS_ROOT/$PERFETTO_CI_JOB_ID
          echo "PERFETTO_ARTIFACTS_DIR=$PERFETTO_ARTIFACTS_DIR" >> $GITHUB_ENV
          mkdir -p $PERFETTO_ARTIFACTS_DIR

      - name: Restore cache
        uses: ./.github/actions/cache-on-google-cloud-storage/restore
        with:
          directory: ${{ env.PERFETTO_CACHE_DIR }}
          cache_key: ${{ env.PERFETTO_CI_BUILD_CACHE_KEY }}

      - uses: ./.github/actions/install-build-deps
        with:
          install-flags: --bazel

      - name: Build Bazel
        shell: bash
        run: |
          BAZEL_DISK_CACHE_FOLDER="$PERFETTO_CACHE_DIR/bazel-disk-cache"
          # Cleanup the cache if any of the two conditions are true.
          BAZEL_DISK_CACHE_GC_OPTIONS="--experimental_disk_cache_gc_max_age=7d --experimental_disk_cache_gc_max_size=10G"
          # We don't run a bazel daemon in background, so we do a GC during the build,
          # that's why we specify _idle_delay=0.
          BAZEL_DISK_CACHE_GC_OPTIONS+=" --experimental_disk_cache_gc_idle_delay=0"
          BAZEL_DISK_CACHE_FLAGS="--disk_cache=${BAZEL_DISK_CACHE_FOLDER} ${BAZEL_DISK_CACHE_GC_OPTIONS}"
          
          mkdir -p "$PERFETTO_BUILD_LOGS_DIR"
          EXEC_LOG_FILE="$PERFETTO_BUILD_LOGS_DIR/execution.log"
          EXPLAIN_FILE="$PERFETTO_BUILD_LOGS_DIR/explain.log"
          
          EXPLAIN_BUILD_ARGS="--execution_log_json_file=$EXEC_LOG_FILE --explain=$EXPLAIN_FILE --verbose_explanations"
          
          tools/bazel build ${BAZEL_DISK_CACHE_FLAGS} ${EXPLAIN_BUILD_ARGS} --verbose_failures //:src_android_sdk_java_main_perfetto_trace_app

      - name: Upload Bazel build logs
        uses: ./.github/actions/cache-on-google-cloud-storage/save
        with:
          cache_key: bazel-build-logs-${{ env.PERFETTO_CI_JOB_ID }}
          directory: ${{ env.PERFETTO_BUILD_LOGS_DIR }}

      - name: Update build cache
        uses: ./.github/actions/cache-on-google-cloud-storage/save
        with:
          directory: ${{ env.PERFETTO_CACHE_DIR }}
          cache_key: ${{ env.PERFETTO_CI_BUILD_CACHE_KEY }}